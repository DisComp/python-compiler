package com.language.parser;

import java.util.*;
import java.util.ArrayList;
import java_cup.runtime.*;
import com.language.model.expression.*;
import com.language.exceptions.*;
import com.language.controllers.*;

/* Numbers */
terminal String INTEGER, FLOAT, LONG_INT;

/* Arithmetic operators */
terminal String PLUS, MINUS, TIMES, EXP, DIV, DIV_INT, MOD;

/* Bitwise operators */
terminal String AND_BIT, OR_BIT, XOR_BIT, NOT_BIT, LSHIFT, RSHIFT;

/* Strings */
terminal String STRING, ESCAPE, TAB;

/* Boolean */
terminal String TRUE, FALSE;

/* Boolean operators */
terminal String AND, OR, NOT, EQUALS, DISTINCT, LESS, GREATER, LESS_EQUAL, GREATER_EQUAL;

/* Punctuation chars */
terminal String POINT, SEMICOLON, COMMA, COLON, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, ASSIGN;

/* Structure control */
terminal String IF, ELSE, WHILE, BREAK, CONTINUE, FOR, IN, DEF, RETURN;

/* Predefined functions */
	
/* Dictionaries */
terminal String HAS_KEY_FUNC, ITEMS_FUNC, KEYS_FUNC, POP_FUNC, VALUES_FUNC;
	
/* Strings */
terminal String COUNT_FUNC, FIND_FUNC, JOIN_FUNC, SPLIT_FUNC, REPLACE_FUNC, LENGTH_FUNC;

/* Lists */
terminal String APPEND_FUNC, EXTEND_FUNC, INDEX_FUNC, INSERT_FUNC, SIZE_FUNC;
	
/* Input/Output */
terminal String RAW_INPUT_FUNC, PRINT_FUNC;

/* Type conversion */
terminal String INT_FUNC, FLOAT_FUNC, STR_FUNC, TUPLE_FUNC, LIST_FUNC, DICT_FUNC;

/* Long */
terminal String LONG_FUNC;

/* String */
terminal String STRING_FUNC;
	
/* Others */
terminal String NONE; 
terminal String TYPE_FUNC; 
terminal String ID;

/* Line Terminator*/
terminal String LINE_TERMINATOR;

/* NON TERMINALS */
non terminal Expression expr;
non terminal Expression instrucciones;
non terminal Expression instr;
non terminal Expression function_block;
non terminal Expression stmt;
non terminal Expression assignment_expr;
non terminal Expression left_side_expr;
non terminal Expression indent_block;
non terminal Expression indent_instrs;
non terminal Expression if_block;
non terminal Expression while_block;

non terminal Expression predefined_functions_expr;
non terminal Expression predefined_dictionary_functions;
non terminal Expression predefined_string_functions;
non terminal Expression predefined_list_functions;

non terminal Expression boolean_expr;
non terminal Expression bitwise_expr;
non terminal Expression arithmetical_expr;
non terminal Expression parenthesized_expr;
non terminal Expression list_expr;
non terminal Expression element_list;
non terminal Expression dictionary_expr;
non terminal Expression element_dictionary;
non terminal Expression atom_element_dictionary;
non terminal Expression tuple_expr;
non terminal Expression element_tuple;
non terminal Expression atom_element_tuple;
non terminal Expression literal_expr;

non terminal Expression parameters;
non terminal Expression individual_parameters;

precedence left OR;
precedence left AND;
precedence left NOT;
precedence left EQUALS, DISTINCT, LESS, GREATER, LESS_EQUAL, GREATER_EQUAL;
precedence left OR_BIT;
precedence left XOR_BIT;
precedence left AND_BIT;
precedence left LSHIFT, RSHIFT;
precedence left PLUS, MINUS;
precedence left TIMES, DIV, DIV_INT, MOD;
precedence left NOT_BIT;
precedence left EXP;
precedence left ASSIGN;
precedence left TAB;
precedence left IF;
precedence left LINE_TERMINATOR; 
precedence left STRING;

start with instrucciones;

/* Instructions section */
instrucciones::=  instr: i LINE_TERMINATOR {:ScopesController.getInstance().finDeInstruccion(); RESULT = i; :}

				| instr: i LINE_TERMINATOR {:ScopesController.getInstance().finDeInstruccion();:}instrucciones: iss {: i.setLeft(iss);RESULT = i;:}
																	
				| TAB  {:ScopesController.getInstance().consumirTab();:} instrucciones: iss {: RESULT = iss; :}  
				| stmt: s 	{: RESULT = s ; :}
				| function_block: f {: RESULT = f ; :};
			
			
			
/*instrs ::=  instr: i LINE_TERMINATOR instrs: is {: RESULT = i ; :}   
			| instr: i {: RESULT = i; :};
			


indent_instrs ::=  TAB instr: i LINE_TERMINATOR indent_instrs:iis {: i.setLeft(iis);RESULT = i; :}
	  			|  TAB instr: i LINE_TERMINATOR {: RESULT = i; :};*/
				 
instr ::= expr: exp {: RESULT = exp; :}		
		| assignment_expr: v {: RESULT = v; :};

stmt ::=  if_block: s {: RESULT = s; :}
		| while_block: s {: RESULT = s; :};		 

parameters ::= //sin parámetros
			|individual_parameters;//con al menos un parámetro
			
individual_parameters ::=ID: id {: ScopesController.getInstance().addFunctionParameter(id); /*RESULT = LiteralExpression.createIdentifier(id); */:}
						| ID: id COMMA {: ScopesController.getInstance().addFunctionParameter(id); :} individual_parameters/*: p 
			{: 	Expression valorRetorno =  LiteralExpression.createIdentifier(id);
				valorRetorno.setRight(p);
				RESULT = valorRetorno :}*/ ;		
	
function_block ::=	DEF ID: funct_name {:ScopesController.getInstance().openScope(funct_name); :}
					LPAREN parameters RPAREN 
					COLON LINE_TERMINATOR 
					instrucciones:iis
					{: RESULT = FunctionControl.create(funct_name,iis); :};
				

//individual_parameter::= ID:id {: RESULT = id; : };

/* If block */

if_block ::= IF expr COLON LINE_TERMINATOR {:ScopesController.getInstance().openScope(StructureControlExpression.IF); :} instrucciones: iis {: RESULT = StructureControlExpression.create(StructureControlExpression.IF, "if", iis); :};

/* While block */
while_block ::= WHILE expr COLON LINE_TERMINATOR {:ScopesController.getInstance().openScope(StructureControlExpression.WHILE); :} instrucciones: iis {: RESULT = StructureControlExpression.create(StructureControlExpression.WHILE,"while",iis); :};


assignment_expr ::=   left_side_expr: lse ASSIGN expr: e {:	RESULT = LiteralExpression.createAssignment(lse, e); :};  

left_side_expr ::= ID: id {: RESULT = LiteralExpression.createIdentifier(id); :};
				/*| other things that can be assigned e.g lists, dicts*/  

								/* We need to extract the variable value from the java code */
predefined_functions_expr ::= ID: id POINT predefined_dictionary_functions: pdf {: RESULT =  PredefinedFunctionExpression.createDictionaryFunction( LiteralExpression.createIdentifier(id), pdf); :}
							| ID: id POINT predefined_string_functions: psf {: RESULT =  PredefinedFunctionExpression.createStringFunction(LiteralExpression.createIdentifier(id), psf); :}
							| ID: id POINT predefined_list_functions: plf {: RESULT =  PredefinedFunctionExpression.createListFunction(LiteralExpression.createIdentifier(id), plf); :};

predefined_dictionary_functions ::=   HAS_KEY_FUNC LPAREN STRING: s RPAREN {: RESULT = PredefinedFunctionExpression.createStringFunctionElement(PredefinedFunctionExpression.HAS_KEY_FUNC,  LiteralExpression.createString(s)); :}
									| ITEMS_FUNC LPAREN RPAREN {: RESULT = PredefinedFunctionExpression.createStringFunctionElement(PredefinedFunctionExpression.ITEMS_FUNC, null); :}
									| KEYS_FUNC LPAREN RPAREN {: RESULT = PredefinedFunctionExpression.createStringFunctionElement(PredefinedFunctionExpression.KEYS_FUNC, null); :}
									| POP_FUNC LPAREN STRING: s RPAREN {: RESULT = PredefinedFunctionExpression.createStringFunctionElement(PredefinedFunctionExpression.POP_FUNC,  LiteralExpression.createString(s)); :}
									| VALUES_FUNC LPAREN RPAREN {: RESULT = PredefinedFunctionExpression.createStringFunctionElement(PredefinedFunctionExpression.VALUES_FUNC, null); :};


predefined_string_functions ::= COUNT_FUNC LPAREN STRING: s RPAREN {: RESULT = PredefinedFunctionExpression.createStringFunctionElement(PredefinedFunctionExpression.COUNT_FUNC,  LiteralExpression.createString(s)); :}
							|   FIND_FUNC LPAREN STRING: s RPAREN {: RESULT = PredefinedFunctionExpression.createStringFunctionElement(PredefinedFunctionExpression.FIND_FUNC, LiteralExpression.createString(s)); :}
							|   FIND_FUNC LPAREN STRING: s COMMA INTEGER: i RPAREN {: RESULT = PredefinedFunctionExpression.createStringFunctionElement(PredefinedFunctionExpression.FIND_FUNC, LiteralExpression.createString(s), LiteralExpression.createInteger(i)); :}
							|   JOIN_FUNC LPAREN STRING: s RPAREN {: RESULT = PredefinedFunctionExpression.createStringFunctionElement(PredefinedFunctionExpression.JOIN_FUNC,  LiteralExpression.createString(s)); :}
							|   SPLIT_FUNC LPAREN STRING: s RPAREN {: RESULT = PredefinedFunctionExpression.createStringFunctionElement(PredefinedFunctionExpression.SPLIT_FUNC,  LiteralExpression.createString(s)); :}
							|   REPLACE_FUNC LPAREN STRING: o COMMA STRING: n RPAREN {: RESULT = PredefinedFunctionExpression.createStringFunctionElement(PredefinedFunctionExpression.REPLACE_FUNC,  LiteralExpression.createString(o), LiteralExpression.createString(n)); :}
							|   LENGTH_FUNC LPAREN  RPAREN {: RESULT = PredefinedFunctionExpression.createStringFunctionElement(PredefinedFunctionExpression.LENGTH_FUNC, null); :};


predefined_list_functions ::= APPEND_FUNC LPAREN literal_expr:le RPAREN {: RESULT = PredefinedFunctionExpression.createListFunctionElement(PredefinedFunctionExpression.APPEND_FUNC, le); :}
							| COUNT_FUNC LPAREN literal_expr:le RPAREN {: RESULT = PredefinedFunctionExpression.createListFunctionElement(PredefinedFunctionExpression.COUNT_FUNC, le); :}
							| EXTEND_FUNC LPAREN list_expr: l RPAREN {: RESULT = PredefinedFunctionExpression.createListFunctionElement(PredefinedFunctionExpression.EXTEND_FUNC, l); :}
							| INDEX_FUNC LPAREN literal_expr:le RPAREN {: RESULT = PredefinedFunctionExpression.createListFunctionElement(PredefinedFunctionExpression.INDEX_FUNC, le); :}
							| INDEX_FUNC LPAREN literal_expr:le COMMA INTEGER: i RPAREN {: RESULT = PredefinedFunctionExpression.createListFunctionElement(PredefinedFunctionExpression.INDEX_FUNC, le, LiteralExpression.createInteger(i)); :}
							| INSERT_FUNC LPAREN INTEGER: i COMMA literal_expr:le RPAREN {: RESULT = PredefinedFunctionExpression.createListFunctionElement(PredefinedFunctionExpression.INDEX_FUNC, LiteralExpression.createInteger(i), le ); :}
							| POP_FUNC LPAREN INTEGER: i RPAREN {: RESULT = PredefinedFunctionExpression.createListFunctionElement(PredefinedFunctionExpression.POP_FUNC, LiteralExpression.createInteger(i)); :}
							| SIZE_FUNC LPAREN RPAREN {: RESULT = PredefinedFunctionExpression.createListFunctionElement(PredefinedFunctionExpression.SIZE_FUNC, null); :};


/* The precedence starts with boolean_expr */
boolean_expr ::=  boolean_expr: l OR  boolean_expr: r {: RESULT = BooleanExpression.create(BooleanExpression.OR, "or", l, r); :}
				| boolean_expr: l AND boolean_expr: r {: RESULT = BooleanExpression.create(BooleanExpression.AND, "and", l, r); :}
				| NOT boolean_expr: l {: RESULT = BooleanExpression.create(BooleanExpression.NOT, "not", l); :}
				| boolean_expr: l EQUALS boolean_expr: r {: RESULT = BooleanExpression.create(BooleanExpression.EQUALS, "==", l, r); :}
				| boolean_expr: l DISTINCT boolean_expr: r {: RESULT = BooleanExpression.create(BooleanExpression.DISTINCT, "!=", l, r); :}
				| boolean_expr: l LESS boolean_expr: r {: RESULT = BooleanExpression.create(BooleanExpression.LESS, "<", l, r); :}
				| boolean_expr: l GREATER boolean_expr: r {: RESULT = BooleanExpression.create(BooleanExpression.GREATER, ">", l, r); :}
				| boolean_expr: l LESS_EQUAL boolean_expr: r {: RESULT = BooleanExpression.create(BooleanExpression.LESS_EQUAL, "<=", l, r); :}
				| boolean_expr: l GREATER_EQUAL boolean_expr: r {: RESULT = BooleanExpression.create(BooleanExpression.GREATER_EQUAL, ">=", l, r); :}
				| bitwise_expr: x {: RESULT = x; :};	

bitwise_expr ::=    bitwise_expr: l OR_BIT  bitwise_expr: r {: RESULT = BitwiseExpression.create(BitwiseExpression.OR_BIT, "|", l, r); :}
				  | bitwise_expr: l XOR_BIT bitwise_expr: r {: RESULT = BitwiseExpression.create(BitwiseExpression.XOR_BIT, "^", l, r); :}
				  | bitwise_expr: l AND_BIT bitwise_expr: r {: RESULT = BitwiseExpression.create(BitwiseExpression.AND_BIT, "&", l, r); :}
				  | bitwise_expr: l LSHIFT  bitwise_expr: r {: RESULT = BitwiseExpression.create(BitwiseExpression.LSHIFT, "<<", l, r); :}
                  | bitwise_expr: l RSHIFT  bitwise_expr: r {: RESULT = BitwiseExpression.create(BitwiseExpression.RSHIFT, ">>", l, r); :}
                  | NOT_BIT  bitwise_expr: l {: RESULT = BitwiseExpression.create(BitwiseExpression.NOT_BIT, "~", l); :}
				  | arithmetical_expr: x {: RESULT = x; :};				  

arithmetical_expr ::=    arithmetical_expr: l PLUS    arithmetical_expr: r {: RESULT = ArithmeticalExpression.create(ArithmeticalExpression.PLUS, "+", l, r); :}
				       | arithmetical_expr: l MINUS   arithmetical_expr: r {: RESULT = ArithmeticalExpression.create(ArithmeticalExpression.MINUS, "-", l, r); :}
					   | arithmetical_expr: l TIMES   arithmetical_expr: r {: RESULT = ArithmeticalExpression.create(ArithmeticalExpression.TIMES, "*", l, r); :} 
				       | arithmetical_expr: l DIV     arithmetical_expr: r {: RESULT = ArithmeticalExpression.create(ArithmeticalExpression.DIV, "/", l, r); :}
				       | arithmetical_expr: l DIV_INT arithmetical_expr: r {: RESULT = ArithmeticalExpression.create(ArithmeticalExpression.DIV_INT, "//", l, r); :}
				       | arithmetical_expr: l MOD     arithmetical_expr: r {: RESULT = ArithmeticalExpression.create(ArithmeticalExpression.MOD, "%", l, r); :}
                       | arithmetical_expr: b EXP     arithmetical_expr: e {: RESULT = ArithmeticalExpression.create(ArithmeticalExpression.EXP, "**", b, e); :}
					   | literal_expr: x {: RESULT = x; :};
					
parenthesized_expr ::= LPAREN boolean_expr:be RPAREN {: RESULT = be; :};
    
list_expr ::= LBRACKET element_list:el RBRACKET {: RESULT = el; :}
    		| LBRACKET RBRACKET {: RESULT = LiteralExpression.createListElement(null, null); :};
    		
element_list ::=  literal_expr:le COMMA element_list:el {: RESULT = LiteralExpression.createListElement(le, el); :}
				| literal_expr:le {: RESULT = le; :};

dictionary_expr ::= LBRACE element_dictionary:ed RBRACE {: RESULT = ed; :}
				|   LBRACE RBRACE {: RESULT = LiteralExpression.createDictionaryElement(null, null); :};
    		
element_dictionary ::= atom_element_dictionary:atd element_dictionary:ed {: RESULT = LiteralExpression.createDictionaryElement(atd, ed); :}
					|  atom_element_dictionary:atd {: RESULT = atd; :}
					|  TAB element_dictionary:ed {: RESULT = ed; :}
					|  LINE_TERMINATOR element_dictionary:ed {: RESULT = ed; :}
					|  TAB
					|  LINE_TERMINATOR;

atom_element_dictionary ::= STRING:key COLON STRING:val COMMA {: RESULT = LiteralExpression.createAtomDictionaryElement(key, val); :}
						|   STRING:key COLON STRING:val {: RESULT = LiteralExpression.createAtomDictionaryElement(key, val); :};


tuple_expr ::= LPAREN element_tuple:et RPAREN {: RESULT = et; :}
			|  LPAREN RPAREN {: RESULT = LiteralExpression.createTupleElement(null, null); :};
    		
element_tuple ::= literal_expr:le atom_element_tuple:aet {: RESULT = LiteralExpression.createTupleElement(le, aet); :};

atom_element_tuple ::= COMMA literal_expr: le atom_element_tuple: aet {: RESULT = LiteralExpression.createTupleElement(le, aet); :}
					|  COMMA literal_expr: le {: RESULT = le; :}
					|  COMMA;
             
literal_expr ::=  ID: 		id {: RESULT = LiteralExpression.createIdentifier(id); :}
				| NONE: 	n  {: RESULT = LiteralExpression.createNone(); :}
				| FALSE:    f  {: RESULT = LiteralExpression.createBoolean(f); :}
				| TRUE:     t  {: RESULT = LiteralExpression.createBoolean(t); :}
				| INTEGER:  i  {: RESULT = LiteralExpression.createInteger(i); :}				
				| FLOAT:    f  {: RESULT = LiteralExpression.createFloat(f); :}
				| LONG_INT: l  {: RESULT = LiteralExpression.createLongInt(l); :}
				| STRING:   s  {: RESULT = LiteralExpression.createString(s); :}
				| parenthesized_expr: p {: RESULT = p; :}
				| list_expr: l {: RESULT = LiteralExpression.createList(l); :}
				| dictionary_expr: l {: RESULT = LiteralExpression.createDictionary(l); :}
				| tuple_expr: l {: RESULT = LiteralExpression.createTuple(l); :};				

expr  ::= boolean_expr: b {: RESULT = b; :}
		| predefined_functions_expr: pfe {: RESULT = pfe; :};  
	
