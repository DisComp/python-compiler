
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jun 30 01:51:35 UYT 2015
//----------------------------------------------------

package com.language.parser;

import java.util.*;
import java_cup.runtime.*;
import com.language.model.expression.*;
import com.language.exceptions.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jun 30 01:51:35 UYT 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\003\004\000\002\003" +
    "\003\000\002\011\005\000\002\011\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\005\007\000\002\006\003\000\002\006\003\000\002" +
    "\012\006\000\002\013\006\000\002\014\005\000\002\014" +
    "\005\000\002\014\004\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\003\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\004\000\002\015\003\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\003\000\002\017\005\000\002\020\005\000\002\020" +
    "\004\000\002\021\003\000\002\021\005\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\002" +
    "\003\000\002\002\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\042\004\033\005\026\006\017\021\004\024" +
    "\025\027\013\030\031\033\012\046\015\052\016\055\014" +
    "\057\007\064\030\120\021\122\022\123\027\001\002\000" +
    "\030\004\033\005\026\006\017\021\004\024\025\027\013" +
    "\030\031\046\015\052\016\120\021\122\022\001\002\000" +
    "\050\002\ufffc\004\ufffc\005\ufffc\006\ufffc\021\ufffc\024\ufffc" +
    "\026\ufffc\027\ufffc\030\ufffc\033\ufffc\046\ufffc\052\ufffc\054" +
    "\131\055\ufffc\057\ufffc\064\ufffc\120\ufffc\122\ufffc\123\ufffc" +
    "\001\002\000\046\002\ufff6\004\ufff6\005\ufff6\006\ufff6\021" +
    "\ufff6\024\ufff6\026\ufff6\027\ufff6\030\ufff6\033\ufff6\046\ufff6" +
    "\052\ufff6\055\ufff6\057\ufff6\064\ufff6\120\ufff6\122\ufff6\123" +
    "\ufff6\001\002\000\032\004\033\005\026\006\017\021\004" +
    "\024\025\027\013\030\031\033\012\046\015\052\016\120" +
    "\021\122\022\001\002\000\046\002\ufffa\004\ufffa\005\ufffa" +
    "\006\ufffa\021\ufffa\024\ufffa\026\ufffa\027\ufffa\030\ufffa\033" +
    "\ufffa\046\ufffa\052\ufffa\055\ufffa\057\ufffa\064\ufffa\120\ufffa" +
    "\122\ufffa\123\ufffa\001\002\000\130\002\uffcd\004\uffcd\005" +
    "\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd" +
    "\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022" +
    "\uffcd\023\uffcd\024\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd" +
    "\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\041\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\052\uffcd" +
    "\053\uffcd\054\uffcd\055\uffcd\057\uffcd\064\uffcd\120\uffcd\122" +
    "\uffcd\123\uffcd\001\002\000\032\004\033\005\026\006\017" +
    "\021\004\024\025\027\013\030\031\033\012\046\015\052" +
    "\016\120\021\122\022\001\002\000\130\002\uffd2\004\uffd2" +
    "\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013" +
    "\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\026\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2" +
    "\040\uffd2\041\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\052" +
    "\uffd2\053\uffd2\054\uffd2\055\uffd2\057\uffd2\064\uffd2\120\uffd2" +
    "\122\uffd2\123\uffd2\001\002\000\032\004\033\005\026\006" +
    "\017\021\004\024\025\027\013\030\031\033\012\046\015" +
    "\052\016\120\021\122\022\001\002\000\032\004\033\005" +
    "\026\006\017\021\004\024\025\027\013\030\031\033\012" +
    "\046\015\052\016\120\021\122\022\001\002\000\030\004" +
    "\033\005\026\006\017\024\025\027\013\030\031\046\015" +
    "\052\016\053\121\120\021\122\022\001\002\000\130\002" +
    "\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf" +
    "\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020" +
    "\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\026\uffcf\027\uffcf" +
    "\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036" +
    "\uffcf\037\uffcf\040\uffcf\041\uffcf\044\uffcf\045\uffcf\046\uffcf" +
    "\047\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\057\uffcf\064" +
    "\uffcf\120\uffcf\122\uffcf\123\uffcf\001\002\000\044\002\115" +
    "\004\033\005\026\006\017\021\004\024\025\027\013\030" +
    "\031\033\012\046\015\052\016\055\014\057\007\064\030" +
    "\120\021\122\022\123\027\001\002\000\130\002\uffd4\004" +
    "\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4" +
    "\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021" +
    "\uffd4\022\uffd4\023\uffd4\024\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\041\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4" +
    "\052\uffd4\053\uffd4\054\uffd4\055\uffd4\057\uffd4\064\uffd4\120" +
    "\uffd4\122\uffd4\123\uffd4\001\002\000\130\002\uffd5\004\uffd5" +
    "\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013" +
    "\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5" +
    "\022\uffd5\023\uffd5\024\uffd5\026\uffd5\027\uffd5\030\uffd5\031" +
    "\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5" +
    "\040\uffd5\041\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\052" +
    "\uffd5\053\uffd5\054\uffd5\055\uffd5\057\uffd5\064\uffd5\120\uffd5" +
    "\122\uffd5\123\uffd5\001\002\000\072\002\uffcb\004\uffcb\005" +
    "\uffcb\006\uffcb\021\uffcb\024\uffcb\026\uffcb\027\uffcb\030\uffcb" +
    "\031\077\032\104\033\uffcb\034\100\035\075\036\102\037" +
    "\076\040\103\041\101\045\uffcb\046\uffcb\052\uffcb\054\uffcb" +
    "\055\uffcb\057\uffcb\064\uffcb\120\uffcb\122\uffcb\123\uffcb\001" +
    "\002\000\130\002\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc" +
    "\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016" +
    "\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc" +
    "\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034" +
    "\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\044\uffcc" +
    "\045\uffcc\046\uffcc\047\uffcc\052\uffcc\053\uffcc\054\uffcc\055" +
    "\uffcc\057\uffcc\064\uffcc\120\uffcc\122\uffcc\123\uffcc\001\002" +
    "\000\130\002\uffce\004\uffce\005\uffce\006\uffce\007\uffce\010" +
    "\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce" +
    "\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\026" +
    "\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce" +
    "\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\044\uffce\045" +
    "\uffce\046\uffce\047\uffce\052\uffce\053\uffce\054\uffce\055\uffce" +
    "\057\uffce\064\uffce\120\uffce\122\uffce\123\uffce\001\002\000" +
    "\130\002\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0" +
    "\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017" +
    "\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\026\uffd0" +
    "\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035" +
    "\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\044\uffd0\045\uffd0" +
    "\046\uffd0\047\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\057" +
    "\uffd0\064\uffd0\120\uffd0\122\uffd0\123\uffd0\001\002\000\046" +
    "\002\ufff9\004\ufff9\005\ufff9\006\ufff9\021\ufff9\024\ufff9\026" +
    "\ufff9\027\ufff9\030\ufff9\033\ufff9\046\ufff9\052\ufff9\055\ufff9" +
    "\057\ufff9\064\ufff9\120\ufff9\122\ufff9\123\ufff9\001\002\000" +
    "\004\122\071\001\002\000\130\002\uffd3\004\uffd3\005\uffd3" +
    "\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014" +
    "\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3" +
    "\023\uffd3\024\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3" +
    "\041\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\052\uffd3\053" +
    "\uffd3\054\uffd3\055\uffd3\057\uffd3\064\uffd3\120\uffd3\122\uffd3" +
    "\123\uffd3\001\002\000\124\002\uffe3\004\uffe3\005\uffe3\006" +
    "\uffe3\007\054\010\056\011\060\012\055\013\057\014\061" +
    "\015\053\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023" +
    "\uffe3\024\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3" +
    "\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041" +
    "\uffe3\045\uffe3\046\uffe3\047\uffe3\052\uffe3\054\uffe3\055\uffe3" +
    "\057\uffe3\064\uffe3\120\uffe3\122\uffe3\123\uffe3\001\002\000" +
    "\130\002\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1" +
    "\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017" +
    "\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\026\uffd1" +
    "\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035" +
    "\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\044\uffd1\045\uffd1" +
    "\046\uffd1\047\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\057" +
    "\uffd1\064\uffd1\120\uffd1\122\uffd1\123\uffd1\001\002\000\046" +
    "\002\ufff7\004\ufff7\005\ufff7\006\ufff7\021\ufff7\024\ufff7\026" +
    "\ufff7\027\ufff7\030\ufff7\033\ufff7\046\ufff7\052\ufff7\055\ufff7" +
    "\057\ufff7\064\ufff7\120\ufff7\122\ufff7\123\ufff7\001\002\000" +
    "\044\002\uffff\004\uffff\005\uffff\006\uffff\021\uffff\024\uffff" +
    "\027\uffff\030\uffff\033\uffff\046\uffff\052\uffff\055\uffff\057" +
    "\uffff\064\uffff\120\uffff\122\uffff\123\uffff\001\002\000\106" +
    "\002\uffea\004\uffea\005\uffea\006\uffea\016\041\017\042\020" +
    "\045\021\uffea\022\043\023\044\024\uffea\026\uffea\027\uffea" +
    "\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036" +
    "\uffea\037\uffea\040\uffea\041\uffea\045\uffea\046\uffea\047\uffea" +
    "\052\uffea\054\uffea\055\uffea\057\uffea\064\uffea\120\uffea\122" +
    "\uffea\123\uffea\001\002\000\124\002\uffdb\004\uffdb\005\uffdb" +
    "\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014" +
    "\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb" +
    "\023\uffdb\024\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\041\uffdb\045\uffdb\046\uffdb\047\uffdb\052\uffdb\054\uffdb\055" +
    "\uffdb\057\uffdb\064\uffdb\120\uffdb\122\uffdb\123\uffdb\001\002" +
    "\000\046\002\ufffb\004\ufffb\005\ufffb\006\ufffb\021\ufffb\024" +
    "\ufffb\026\ufffb\027\ufffb\030\ufffb\033\ufffb\046\ufffb\052\ufffb" +
    "\055\ufffb\057\ufffb\064\ufffb\120\ufffb\122\ufffb\123\ufffb\001" +
    "\002\000\030\004\033\005\026\006\017\021\004\024\025" +
    "\027\013\030\031\046\015\052\016\120\021\122\022\001" +
    "\002\000\030\004\033\005\026\006\017\021\004\024\025" +
    "\027\013\030\031\046\015\052\016\120\021\122\022\001" +
    "\002\000\030\004\033\005\026\006\017\021\004\024\025" +
    "\027\013\030\031\046\015\052\016\120\021\122\022\001" +
    "\002\000\030\004\033\005\026\006\017\021\004\024\025" +
    "\027\013\030\031\046\015\052\016\120\021\122\022\001" +
    "\002\000\030\004\033\005\026\006\017\021\004\024\025" +
    "\027\013\030\031\046\015\052\016\120\021\122\022\001" +
    "\002\000\106\002\uffe8\004\uffe8\005\uffe8\006\uffe8\016\041" +
    "\017\uffe8\020\uffe8\021\uffe8\022\043\023\044\024\uffe8\026" +
    "\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8" +
    "\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\045\uffe8\046" +
    "\uffe8\047\uffe8\052\uffe8\054\uffe8\055\uffe8\057\uffe8\064\uffe8" +
    "\120\uffe8\122\uffe8\123\uffe8\001\002\000\106\002\uffe5\004" +
    "\uffe5\005\uffe5\006\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5" +
    "\022\uffe5\023\uffe5\024\uffe5\026\uffe5\027\uffe5\030\uffe5\031" +
    "\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5" +
    "\040\uffe5\041\uffe5\045\uffe5\046\uffe5\047\uffe5\052\uffe5\054" +
    "\uffe5\055\uffe5\057\uffe5\064\uffe5\120\uffe5\122\uffe5\123\uffe5" +
    "\001\002\000\106\002\uffe6\004\uffe6\005\uffe6\006\uffe6\016" +
    "\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6" +
    "\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034" +
    "\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\045\uffe6" +
    "\046\uffe6\047\uffe6\052\uffe6\054\uffe6\055\uffe6\057\uffe6\064" +
    "\uffe6\120\uffe6\122\uffe6\123\uffe6\001\002\000\106\002\uffe9" +
    "\004\uffe9\005\uffe9\006\uffe9\016\041\017\uffe9\020\045\021" +
    "\uffe9\022\043\023\044\024\uffe9\026\uffe9\027\uffe9\030\uffe9" +
    "\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037" +
    "\uffe9\040\uffe9\041\uffe9\045\uffe9\046\uffe9\047\uffe9\052\uffe9" +
    "\054\uffe9\055\uffe9\057\uffe9\064\uffe9\120\uffe9\122\uffe9\123" +
    "\uffe9\001\002\000\106\002\uffe7\004\uffe7\005\uffe7\006\uffe7" +
    "\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\043\023\044\024" +
    "\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\045" +
    "\uffe7\046\uffe7\047\uffe7\052\uffe7\054\uffe7\055\uffe7\057\uffe7" +
    "\064\uffe7\120\uffe7\122\uffe7\123\uffe7\001\002\000\026\004" +
    "\033\005\026\006\017\024\025\027\013\030\031\046\015" +
    "\052\016\120\021\122\022\001\002\000\026\004\033\005" +
    "\026\006\017\024\025\027\013\030\031\046\015\052\016" +
    "\120\021\122\022\001\002\000\026\004\033\005\026\006" +
    "\017\024\025\027\013\030\031\046\015\052\016\120\021" +
    "\122\022\001\002\000\026\004\033\005\026\006\017\024" +
    "\025\027\013\030\031\046\015\052\016\120\021\122\022" +
    "\001\002\000\026\004\033\005\026\006\017\024\025\027" +
    "\013\030\031\046\015\052\016\120\021\122\022\001\002" +
    "\000\026\004\033\005\026\006\017\024\025\027\013\030" +
    "\031\046\015\052\016\120\021\122\022\001\002\000\026" +
    "\004\033\005\026\006\017\024\025\027\013\030\031\046" +
    "\015\052\016\120\021\122\022\001\002\000\124\002\uffde" +
    "\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012" +
    "\055\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde" +
    "\021\uffde\022\uffde\023\uffde\024\uffde\026\uffde\027\uffde\030" +
    "\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde" +
    "\037\uffde\040\uffde\041\uffde\045\uffde\046\uffde\047\uffde\052" +
    "\uffde\054\uffde\055\uffde\057\uffde\064\uffde\120\uffde\122\uffde" +
    "\123\uffde\001\002\000\124\002\uffe0\004\uffe0\005\uffe0\006" +
    "\uffe0\007\uffe0\010\uffe0\011\uffe0\012\055\013\uffe0\014\uffe0" +
    "\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023" +
    "\uffe0\024\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0" +
    "\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\045\uffe0\046\uffe0\047\uffe0\052\uffe0\054\uffe0\055\uffe0" +
    "\057\uffe0\064\uffe0\120\uffe0\122\uffe0\123\uffe0\001\002\000" +
    "\124\002\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf" +
    "\011\uffdf\012\055\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017" +
    "\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\026\uffdf" +
    "\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\045\uffdf\046\uffdf" +
    "\047\uffdf\052\uffdf\054\uffdf\055\uffdf\057\uffdf\064\uffdf\120" +
    "\uffdf\122\uffdf\123\uffdf\001\002\000\124\002\uffe1\004\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\060\012\055\013" +
    "\057\014\061\015\053\016\uffe1\017\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\023\uffe1\024\uffe1\026\uffe1\027\uffe1\030\uffe1\031" +
    "\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1" +
    "\040\uffe1\041\uffe1\045\uffe1\046\uffe1\047\uffe1\052\uffe1\054" +
    "\uffe1\055\uffe1\057\uffe1\064\uffe1\120\uffe1\122\uffe1\123\uffe1" +
    "\001\002\000\124\002\uffdc\004\uffdc\005\uffdc\006\uffdc\007" +
    "\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc" +
    "\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc" +
    "\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\045" +
    "\uffdc\046\uffdc\047\uffdc\052\uffdc\054\uffdc\055\uffdc\057\uffdc" +
    "\064\uffdc\120\uffdc\122\uffdc\123\uffdc\001\002\000\124\002" +
    "\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\060" +
    "\012\055\013\057\014\061\015\053\016\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\026\uffe2\027\uffe2" +
    "\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\045\uffe2\046\uffe2\047\uffe2" +
    "\052\uffe2\054\uffe2\055\uffe2\057\uffe2\064\uffe2\120\uffe2\122" +
    "\uffe2\123\uffe2\001\002\000\124\002\uffdd\004\uffdd\005\uffdd" +
    "\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\055\013\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd" +
    "\041\uffdd\045\uffdd\046\uffdd\047\uffdd\052\uffdd\054\uffdd\055" +
    "\uffdd\057\uffdd\064\uffdd\120\uffdd\122\uffdd\123\uffdd\001\002" +
    "\000\004\046\072\001\002\000\004\047\073\001\002\000" +
    "\004\045\074\001\002\000\046\002\ufff8\004\ufff8\005\ufff8" +
    "\006\ufff8\021\ufff8\024\ufff8\026\ufff8\027\ufff8\030\ufff8\033" +
    "\ufff8\046\ufff8\052\ufff8\055\ufff8\057\ufff8\064\ufff8\120\ufff8" +
    "\122\ufff8\123\ufff8\001\002\000\032\004\033\005\026\006" +
    "\017\021\004\024\025\027\013\030\031\033\012\046\015" +
    "\052\016\120\021\122\022\001\002\000\032\004\033\005" +
    "\026\006\017\021\004\024\025\027\013\030\031\033\012" +
    "\046\015\052\016\120\021\122\022\001\002\000\032\004" +
    "\033\005\026\006\017\021\004\024\025\027\013\030\031" +
    "\033\012\046\015\052\016\120\021\122\022\001\002\000" +
    "\032\004\033\005\026\006\017\021\004\024\025\027\013" +
    "\030\031\033\012\046\015\052\016\120\021\122\022\001" +
    "\002\000\032\004\033\005\026\006\017\021\004\024\025" +
    "\027\013\030\031\033\012\046\015\052\016\120\021\122" +
    "\022\001\002\000\032\004\033\005\026\006\017\021\004" +
    "\024\025\027\013\030\031\033\012\046\015\052\016\120" +
    "\021\122\022\001\002\000\032\004\033\005\026\006\017" +
    "\021\004\024\025\027\013\030\031\033\012\046\015\052" +
    "\016\120\021\122\022\001\002\000\032\004\033\005\026" +
    "\006\017\021\004\024\025\027\013\030\031\033\012\046" +
    "\015\052\016\120\021\122\022\001\002\000\074\002\ufff3" +
    "\004\ufff3\005\ufff3\006\ufff3\021\ufff3\024\ufff3\026\ufff3\027" +
    "\ufff3\030\ufff3\031\077\032\ufff3\033\ufff3\034\100\035\075" +
    "\036\102\037\076\040\103\041\101\045\ufff3\046\ufff3\047" +
    "\ufff3\052\ufff3\054\ufff3\055\ufff3\057\ufff3\064\ufff3\120\ufff3" +
    "\122\ufff3\123\ufff3\001\002\000\074\002\uffec\004\uffec\005" +
    "\uffec\006\uffec\021\uffec\024\uffec\026\uffec\027\uffec\030\uffec" +
    "\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037" +
    "\uffec\040\uffec\041\uffec\045\uffec\046\uffec\047\uffec\052\uffec" +
    "\054\uffec\055\uffec\057\uffec\064\uffec\120\uffec\122\uffec\123" +
    "\uffec\001\002\000\074\002\uffee\004\uffee\005\uffee\006\uffee" +
    "\021\uffee\024\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032" +
    "\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee" +
    "\041\uffee\045\uffee\046\uffee\047\uffee\052\uffee\054\uffee\055" +
    "\uffee\057\uffee\064\uffee\120\uffee\122\uffee\123\uffee\001\002" +
    "\000\074\002\uffeb\004\uffeb\005\uffeb\006\uffeb\021\uffeb\024" +
    "\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb" +
    "\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\045" +
    "\uffeb\046\uffeb\047\uffeb\052\uffeb\054\uffeb\055\uffeb\057\uffeb" +
    "\064\uffeb\120\uffeb\122\uffeb\123\uffeb\001\002\000\074\002" +
    "\ufff0\004\ufff0\005\ufff0\006\ufff0\021\ufff0\024\ufff0\026\ufff0" +
    "\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035" +
    "\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\045\ufff0\046\ufff0" +
    "\047\ufff0\052\ufff0\054\ufff0\055\ufff0\057\ufff0\064\ufff0\120" +
    "\ufff0\122\ufff0\123\ufff0\001\002\000\074\002\ufff2\004\ufff2" +
    "\005\ufff2\006\ufff2\021\ufff2\024\ufff2\026\ufff2\027\ufff2\030" +
    "\ufff2\031\ufff2\032\ufff2\033\ufff2\034\100\035\075\036\102" +
    "\037\076\040\103\041\101\045\ufff2\046\ufff2\047\ufff2\052" +
    "\ufff2\054\ufff2\055\ufff2\057\ufff2\064\ufff2\120\ufff2\122\ufff2" +
    "\123\ufff2\001\002\000\074\002\uffed\004\uffed\005\uffed\006" +
    "\uffed\021\uffed\024\uffed\026\uffed\027\uffed\030\uffed\031\uffed" +
    "\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040" +
    "\uffed\041\uffed\045\uffed\046\uffed\047\uffed\052\uffed\054\uffed" +
    "\055\uffed\057\uffed\064\uffed\120\uffed\122\uffed\123\uffed\001" +
    "\002\000\074\002\uffef\004\uffef\005\uffef\006\uffef\021\uffef" +
    "\024\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033" +
    "\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef" +
    "\045\uffef\046\uffef\047\uffef\052\uffef\054\uffef\055\uffef\057" +
    "\uffef\064\uffef\120\uffef\122\uffef\123\uffef\001\002\000\004" +
    "\002\001\001\002\000\044\002\000\004\000\005\000\006" +
    "\000\021\000\024\000\027\000\030\000\033\000\046\000" +
    "\052\000\055\000\057\000\064\000\120\000\122\000\123" +
    "\000\001\002\000\006\044\122\053\123\001\002\000\006" +
    "\044\uffd7\053\uffd7\001\002\000\130\002\uffd8\004\uffd8\005" +
    "\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022" +
    "\uffd8\023\uffd8\024\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040" +
    "\uffd8\041\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\052\uffd8" +
    "\053\uffd8\054\uffd8\055\uffd8\057\uffd8\064\uffd8\120\uffd8\122" +
    "\uffd8\123\uffd8\001\002\000\026\004\033\005\026\006\017" +
    "\024\025\027\013\030\031\046\015\052\016\120\021\122" +
    "\022\001\002\000\130\002\uffd9\004\uffd9\005\uffd9\006\uffd9" +
    "\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015" +
    "\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9" +
    "\044\uffd9\045\uffd9\046\uffd9\047\uffd9\052\uffd9\053\uffd9\054" +
    "\uffd9\055\uffd9\057\uffd9\064\uffd9\120\uffd9\122\uffd9\123\uffd9" +
    "\001\002\000\006\044\uffd6\053\uffd6\001\002\000\024\031" +
    "\077\032\104\034\100\035\075\036\102\037\076\040\103" +
    "\041\101\047\126\001\002\000\130\002\uffda\004\uffda\005" +
    "\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda" +
    "\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022" +
    "\uffda\023\uffda\024\uffda\026\uffda\027\uffda\030\uffda\031\uffda" +
    "\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040" +
    "\uffda\041\uffda\044\uffda\045\uffda\046\uffda\047\uffda\052\uffda" +
    "\053\uffda\054\uffda\055\uffda\057\uffda\064\uffda\120\uffda\122" +
    "\uffda\123\uffda\001\002\000\006\045\130\054\131\001\002" +
    "\000\004\026\134\001\002\000\032\004\033\005\026\006" +
    "\017\021\004\024\025\027\013\030\031\033\012\046\015" +
    "\052\016\120\021\122\022\001\002\000\052\002\uffca\004" +
    "\uffca\005\uffca\006\uffca\021\uffca\024\uffca\026\uffca\027\uffca" +
    "\030\uffca\033\uffca\045\uffca\046\uffca\052\uffca\054\uffca\055" +
    "\uffca\057\uffca\064\uffca\120\uffca\122\uffca\123\uffca\001\002" +
    "\000\046\002\ufff5\004\ufff5\005\ufff5\006\ufff5\021\ufff5\024" +
    "\ufff5\026\136\027\ufff5\030\ufff5\033\ufff5\046\ufff5\052\ufff5" +
    "\055\ufff5\057\ufff5\064\ufff5\120\ufff5\122\ufff5\123\ufff5\001" +
    "\002\000\042\004\033\005\026\006\017\021\004\024\025" +
    "\027\013\030\031\033\012\046\015\052\016\055\014\057" +
    "\007\064\030\120\021\122\022\123\027\001\002\000\046" +
    "\002\ufffd\004\ufffd\005\ufffd\006\ufffd\021\ufffd\024\ufffd\026" +
    "\ufffd\027\ufffd\030\ufffd\033\ufffd\046\ufffd\052\ufffd\055\ufffd" +
    "\057\ufffd\064\ufffd\120\ufffd\122\ufffd\123\ufffd\001\002\000" +
    "\042\004\033\005\026\006\017\021\004\024\025\027\013" +
    "\030\031\033\012\046\015\052\016\055\014\057\007\064" +
    "\030\120\021\122\022\123\027\001\002\000\046\002\ufffe" +
    "\004\ufffe\005\ufffe\006\ufffe\021\ufffe\024\ufffe\026\ufffe\027" +
    "\ufffe\030\ufffe\033\ufffe\046\ufffe\052\ufffe\055\ufffe\057\ufffe" +
    "\064\ufffe\120\ufffe\122\ufffe\123\ufffe\001\002\000\074\002" +
    "\ufff1\004\ufff1\005\ufff1\006\ufff1\021\ufff1\024\ufff1\026\ufff1" +
    "\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\100\035" +
    "\075\036\102\037\076\040\103\041\101\045\ufff1\046\ufff1" +
    "\047\ufff1\052\ufff1\054\ufff1\055\ufff1\057\ufff1\064\ufff1\120" +
    "\ufff1\122\ufff1\123\ufff1\001\002\000\006\045\142\054\131" +
    "\001\002\000\004\026\134\001\002\000\046\002\ufff4\004" +
    "\ufff4\005\ufff4\006\ufff4\021\ufff4\024\ufff4\026\136\027\ufff4" +
    "\030\ufff4\033\ufff4\046\ufff4\052\ufff4\055\ufff4\057\ufff4\064" +
    "\ufff4\120\ufff4\122\ufff4\123\ufff4\001\002\000\106\002\uffe4" +
    "\004\uffe4\005\uffe4\006\uffe4\016\uffe4\017\uffe4\020\uffe4\021" +
    "\uffe4\022\uffe4\023\uffe4\024\uffe4\026\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037" +
    "\uffe4\040\uffe4\041\uffe4\045\uffe4\046\uffe4\047\uffe4\052\uffe4" +
    "\054\uffe4\055\uffe4\057\uffe4\064\uffe4\120\uffe4\122\uffe4\123" +
    "\uffe4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\034\002\004\003\017\004\034\005\007\006" +
    "\037\012\033\013\005\014\022\015\035\016\031\017\010" +
    "\020\023\022\036\001\001\000\014\015\143\016\031\017" +
    "\010\020\023\022\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\002\140\014\022\015\035\016\031\017" +
    "\010\020\023\022\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\014\137\015\035\016\031\017\010\020" +
    "\023\022\036\001\001\000\002\001\001\000\020\002\126" +
    "\014\022\015\035\016\031\017\010\020\023\022\036\001" +
    "\001\000\016\014\124\015\035\016\031\017\010\020\023" +
    "\022\036\001\001\000\012\017\010\020\023\021\116\022" +
    "\117\001\001\000\002\001\001\000\032\002\004\004\115" +
    "\005\007\006\037\012\033\013\005\014\022\015\035\016" +
    "\031\017\010\020\023\022\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\015\051\016" +
    "\031\017\010\020\023\022\036\001\001\000\014\015\050" +
    "\016\031\017\010\020\023\022\036\001\001\000\014\015" +
    "\047\016\031\017\010\020\023\022\036\001\001\000\014" +
    "\015\046\016\031\017\010\020\023\022\036\001\001\000" +
    "\014\015\045\016\031\017\010\020\023\022\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\016\067\017\010" +
    "\020\023\022\036\001\001\000\012\016\066\017\010\020" +
    "\023\022\036\001\001\000\012\016\065\017\010\020\023" +
    "\022\036\001\001\000\012\016\064\017\010\020\023\022" +
    "\036\001\001\000\012\016\063\017\010\020\023\022\036" +
    "\001\001\000\012\016\062\017\010\020\023\022\036\001" +
    "\001\000\012\016\061\017\010\020\023\022\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\014\113\015\035\016\031" +
    "\017\010\020\023\022\036\001\001\000\016\014\112\015" +
    "\035\016\031\017\010\020\023\022\036\001\001\000\016" +
    "\014\111\015\035\016\031\017\010\020\023\022\036\001" +
    "\001\000\016\014\110\015\035\016\031\017\010\020\023" +
    "\022\036\001\001\000\016\014\107\015\035\016\031\017" +
    "\010\020\023\022\036\001\001\000\016\014\106\015\035" +
    "\016\031\017\010\020\023\022\036\001\001\000\016\014" +
    "\105\015\035\016\031\017\010\020\023\022\036\001\001" +
    "\000\016\014\104\015\035\016\031\017\010\020\023\022" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\010\020\023\022\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\132\001\001" +
    "\000\020\002\131\014\022\015\035\016\031\017\010\020" +
    "\023\022\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\002\004\004\134\005\007\006\037\012\033\013" +
    "\005\014\022\015\035\016\031\017\010\020\023\022\036" +
    "\001\001\000\002\001\001\000\032\002\004\004\136\005" +
    "\007\006\037\012\033\013\005\014\022\015\035\016\031" +
    "\017\010\020\023\022\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\142\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= expr ASSIGN expr 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new Expression("=", l, r);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= boolean_expr 
            {
              Expression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression b = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // literal_expr ::= list_expr 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = LiteralExpression.createList(l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // literal_expr ::= parenthesized_expr 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // literal_expr ::= STRING 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = LiteralExpression.createString(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // literal_expr ::= LONG_INT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = LiteralExpression.createLongInt(l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // literal_expr ::= FLOAT 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = LiteralExpression.createFloat(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // literal_expr ::= INTEGER 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = LiteralExpression.createInteger(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // literal_expr ::= TRUE 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = LiteralExpression.createBoolean(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // literal_expr ::= FALSE 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = LiteralExpression.createBoolean(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // literal_expr ::= NONE 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = LiteralExpression.createNone(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // literal_expr ::= ID 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = LiteralExpression.createIdentifier(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // element_list ::= element_list COMMA literal_expr 
            {
              Expression RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression el = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression le = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = LiteralExpression.createListElement(el, le); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("element_list",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // element_list ::= literal_expr 
            {
              Expression RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression le = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = le; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("element_list",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // list_expr ::= LBRACKET RBRACKET 
            {
              Expression RESULT =null;
		 RESULT = LiteralExpression.createListElement(null, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // list_expr ::= LBRACKET element_list RBRACKET 
            {
              Expression RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression el = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = el; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parenthesized_expr ::= LPAREN boolean_expr RPAREN 
            {
              Expression RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression be = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = be; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parenthesized_expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // arithmetical_expr ::= literal_expr 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = x; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetical_expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arithmetical_expr ::= arithmetical_expr EXP arithmetical_expr 
            {
              Expression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression b = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ArithmeticalExpression.create(ArithmeticalExpression.EXP, "**", b, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetical_expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // arithmetical_expr ::= arithmetical_expr MOD arithmetical_expr 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ArithmeticalExpression.create(ArithmeticalExpression.MOD, "%", l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetical_expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arithmetical_expr ::= arithmetical_expr DIV_INT arithmetical_expr 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ArithmeticalExpression.create(ArithmeticalExpression.DIV_INT, "//", l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetical_expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arithmetical_expr ::= arithmetical_expr DIV arithmetical_expr 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ArithmeticalExpression.create(ArithmeticalExpression.DIV, "/", l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetical_expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // arithmetical_expr ::= arithmetical_expr TIMES arithmetical_expr 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ArithmeticalExpression.create(ArithmeticalExpression.TIMES, "*", l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetical_expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // arithmetical_expr ::= arithmetical_expr MINUS arithmetical_expr 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ArithmeticalExpression.create(ArithmeticalExpression.MINUS, "-", l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetical_expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // arithmetical_expr ::= arithmetical_expr PLUS arithmetical_expr 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ArithmeticalExpression.create(ArithmeticalExpression.PLUS, "+", l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetical_expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bitwise_expr ::= arithmetical_expr 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = x; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bitwise_expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bitwise_expr ::= NOT_BIT bitwise_expr 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = BitwiseExpression.create(BitwiseExpression.NOT_BIT, "~", l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bitwise_expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bitwise_expr ::= bitwise_expr RSHIFT bitwise_expr 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = BitwiseExpression.create(BitwiseExpression.RSHIFT, ">>", l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bitwise_expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bitwise_expr ::= bitwise_expr LSHIFT bitwise_expr 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = BitwiseExpression.create(BitwiseExpression.LSHIFT, "<<", l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bitwise_expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bitwise_expr ::= bitwise_expr AND_BIT bitwise_expr 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = BitwiseExpression.create(BitwiseExpression.AND_BIT, "&", l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bitwise_expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bitwise_expr ::= bitwise_expr XOR_BIT bitwise_expr 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = BitwiseExpression.create(BitwiseExpression.XOR_BIT, "^", l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bitwise_expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bitwise_expr ::= bitwise_expr OR_BIT bitwise_expr 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = BitwiseExpression.create(BitwiseExpression.OR_BIT, "|", l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bitwise_expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // boolean_expr ::= bitwise_expr 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression x = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = x; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // boolean_expr ::= boolean_expr GREATER_EQUAL boolean_expr 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = BooleanExpression.create(BooleanExpression.GREATER_EQUAL, ">=", l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // boolean_expr ::= boolean_expr LESS_EQUAL boolean_expr 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = BooleanExpression.create(BooleanExpression.LESS_EQUAL, "<=", l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // boolean_expr ::= boolean_expr GREATER boolean_expr 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = BooleanExpression.create(BooleanExpression.GREATER, ">", l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // boolean_expr ::= boolean_expr LESS boolean_expr 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = BooleanExpression.create(BooleanExpression.LESS, "<", l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // boolean_expr ::= boolean_expr DISTINCT boolean_expr 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = BooleanExpression.create(BooleanExpression.DISTINCT, "!=", l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // boolean_expr ::= boolean_expr EQUALS boolean_expr 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = BooleanExpression.create(BooleanExpression.EQUALS, "==", l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // boolean_expr ::= NOT boolean_expr 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = BooleanExpression.create(BooleanExpression.NOT, "not", l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // boolean_expr ::= boolean_expr AND boolean_expr 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = BooleanExpression.create(BooleanExpression.AND, "and", l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // boolean_expr ::= boolean_expr OR boolean_expr 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = BooleanExpression.create(BooleanExpression.OR, "or", l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // while_block ::= WHILE expr COLON indent_instrs 
            {
              Expression RESULT =null;
		int iisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression iis = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = StructureControlExpression.create(StructureControlExpression.WHILE,"while",iis); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_block",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // if_block ::= IF expr COLON indent_instrs 
            {
              Expression RESULT =null;
		int iisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression iis = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = StructureControlExpression.create(StructureControlExpression.IF, "if", iis); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_block",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= while_block 
            {
              Expression RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression stmt = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= if_block 
            {
              Expression RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression stmt = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // function_block ::= DEF ID LPAREN RPAREN COLON 
            {
              Expression RESULT =null;
		int funct_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int funct_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String funct_name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = FunctionControl.create(funct_name); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_block",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instr ::= LINE_TERMINATOR 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instr ::= function_block 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression f = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instr ::= stmt 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression s = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instr ::= expr 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // indent_instrs ::= TAB instr 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("indent_instrs",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // indent_instrs ::= indent_instrs TAB instr 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("indent_instrs",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrs ::= instr 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrs",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // instrs ::= instrs instr 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrs",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= instrs EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression start_val = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

